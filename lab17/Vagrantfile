# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
  :inetRouter => {
    :box_name => "centos/6",
    #:public => {:ip => '10.10.10.1', :adapter => 1},
    :net => [
      {ip: '192.168.255.1', adapter: 2, :device => "eth1",   netmask: "255.255.255.252", virtualbox__intnet: "router-net"},
      {adapter: 3, auto_config: false, virtualbox__intnet: true},
      {adapter: 4, auto_config: false, virtualbox__intnet: true},
      {adapter: 5, auto_config: false, virtualbox__intnet: true},
    ]
  },
  :inetRouter2 => {
    :box_name => "centos/6",
    #:public => {:ip => '10.10.10.1', :adapter => 1},
    :net => [
      {ip: '192.168.254.1', adapter: 2, :device => "eth1",   netmask: "255.255.255.252", virtualbox__intnet: "router-net"},
      {adapter: 3, network: "private_network", :type => 'dhcp' },
      {adapter: 4, auto_config: false, virtualbox__intnet: true},
      {adapter: 5, auto_config: false, virtualbox__intnet: true},
    ]
  },
  :centralRouter => {
    :box_name => "centos/7",
    :net => [
      {ip: '192.168.255.2', adapter: 2, :device => "eth1",   netmask: "255.255.255.252", virtualbox__intnet: "router-net"},
      {ip: '192.168.0.1',   adapter: 3, :device => "eth2",   netmask: "255.255.255.240", virtualbox__intnet: "dir-net"},
      {ip: '192.168.255.9', adapter: 4, :device => "eth3",   netmask: "255.255.255.252", virtualbox__intnet: "interrouter1-net"},
      {ip: '192.168.255.5', adapter: 5, :device => "eth4",   netmask: "255.255.255.252", virtualbox__intnet: "interrouter2-net"},
    ]
  },
  :centralServer => {
    :box_name => "centos/7",
    :net => [
      {ip: '192.168.0.2',   adapter: 2, :device => "eth1",   netmask: "255.255.255.240", virtualbox__intnet: "dir-net"},
      {adapter: 3, auto_config: false, virtualbox__intnet: true},
      {adapter: 4, auto_config: false, virtualbox__intnet: true},
      {adapter: 5, auto_config: false, virtualbox__intnet: true},
    ]
  },
  :office1Router => {
    :box_name => "centos/7",
    :net => [
      {ip: '192.168.255.10',  adapter: 2, :device => "eth1",   netmask: "255.255.255.252", virtualbox__intnet: "interrouter1-net"},
      {ip: '192.168.2.1',     adapter: 3, :device => "eth2",   netmask: "255.255.255.192", virtualbox__intnet: "office1dev-net"},
      {ip: '192.168.2.65',    adapter: 4, :device => "eth3",   netmask: "255.255.255.192", virtualbox__intnet: "office1testservers-net"},
      {ip: '192.168.2.129',   adapter: 5, :device => "eth4",   netmask: "255.255.255.192", virtualbox__intnet: "office1mngr-net"},
    ]
  },
  :office1Server => {
    :box_name => "centos/7",
    :net => [
      {ip: '192.168.2.66',   adapter: 2, :device => "eth1",   netmask: "255.255.255.192", virtualbox__intnet: "office1testservers-net"},
      {adapter: 3, auto_config: false, virtualbox__intnet: true},
      {adapter: 4, auto_config: false, virtualbox__intnet: true},
      {adapter: 5, auto_config: false, virtualbox__intnet: true},
    ]
  },
  :office2Router => {
    :box_name => "centos/7",
    :net => [
      {ip: '192.168.255.6',   adapter: 2, :device => "eth1",   netmask: "255.255.255.252", virtualbox__intnet: "interrouter2-net"},
      {ip: '192.168.1.1',     adapter: 3, :device => "eth2",   netmask: "255.255.255.128", virtualbox__intnet: "office2dev-net"},
      {ip: '192.168.1.129',   adapter: 4, :device => "eth3",   netmask: "255.255.255.192", virtualbox__intnet: "office2testservers-net"},
      {ip: '192.168.1.193',   adapter: 5, :device => "eth4",   netmask: "255.255.255.192", virtualbox__intnet: "office2hw-net"},
    ]
  },
  :office2Server => {
    :box_name => "centos/7",
    :net => [
      {ip: '192.168.1.130',   adapter: 2, :device => "eth1",   netmask: "255.255.255.192", virtualbox__intnet: "office2testservers-net"},
      {adapter: 3, auto_config: false, virtualbox__intnet: true},
      {adapter: 4, auto_config: false, virtualbox__intnet: true},
      {adapter: 5, auto_config: false, virtualbox__intnet: true},
    ]
  },
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

    config.vm.define boxname do |box|

        box.vm.box = boxconfig[:box_name]
        box.vm.host_name = boxname.to_s
        boxconfig[:net].each do |ipconf|
          box.vm.network "private_network", ipconf
          end

        box.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--memory", "192"]
          vb.customize ["modifyvm", :id, "--cpus", "1"]
          vb.name = boxname.to_s
          end
        
        if boxconfig.key?(:public)
          box.vm.network "public_network", boxconfig[:public]
          end

        box.vm.provision "shell", inline: <<-SHELL
          mkdir -p ~root/.ssh
          cp ~vagrant/.ssh/auth* ~root/.ssh
          SHELL
        
        case boxname.to_s
        when "inetRouter"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            sysctl net.ipv4.conf.all.forwarding=1
            iptables -t nat -A POSTROUTING ! -d 192.168.0.0/22 -o eth0 -j MASQUERADE
            ip route add 192.168.0.0/24 via 192.168.255.2 dev eth1
            ip route add 192.168.1.0/24 via 192.168.255.2 dev eth1
            ip route add 192.168.2.0/24 via 192.168.255.2 dev eth1
            ip route add 192.168.255.4/30 via 192.168.255.2 dev eth1
            ip route add 192.168.255.8/30 via 192.168.255.2 dev eth1
            # port knocking - 6699 9966 22 - 60 sec
            # разрешим соединения со статусом est и rel в conntracker
            iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
            # разрешим icmp
            iptables -A INPUT -p icmp --icmp-type any -j ACCEPT
            # создадим цепочку для port knocking
            iptables -N SSH_KNOCK
            # сделаем переход из input в цепочку для port knocking
            iptables -A INPUT -j SSH_KNOCK
            # заранее создадим цепочку для SSH SET
            iptables -N SSH_SET
            # если наш хост есть в списке SSH_STEP2 не более, чем 60 секунд, то пускаем...
            iptables -A SSH_KNOCK -m state --state NEW -m tcp -p tcp -m recent --rcheck --seconds 60 --dport 22 --name SSH_STEP2 -j ACCEPT
            # ... иначе удаляем его из списка (> 60 секунд)
            iptables -A SSH_KNOCK -m state --state NEW -m tcp -p tcp -m recent --name SSH_STEP2 --remove -j DROP
            # если наш хост стучался по порту 9966 и был в списке SSH_STEP1 ...
            iptables -A SSH_KNOCK -m state --state NEW -m tcp -p tcp -m recent --rcheck --dport 9966 --name SSH_STEP1 -j SSH_SET
            # ... то включить его в список SSH_STEP2
            iptables -A SSH_SET -m recent --set --name SSH_STEP2 -j DROP
            # ... иначе - удалить из списка SSH_STEP1
            iptables -A SSH_KNOCK -m state --state NEW -m tcp -p tcp -m recent --name SSH_STEP1 --remove -j DROP
            # если хост стучится по порту 6699, то добавить его в список SSH_STEP1
            iptables -A SSH_KNOCK -m state --state NEW -m tcp -p tcp -m recent --set --dport 6699 --name SSH_STEP1 -j DROP
            # по-умолчанию DROP внутри port knocking
            iptables -A SSH_KNOCK -j DROP
            # по-умолчанию DROP со стороны, откуда будет идти проверка
            iptables -A INPUT -i eth1 -j DROP
            SHELL

        when "inetRouter2"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            sysctl net.ipv4.conf.all.forwarding=1
            ip route add 192.168.0.0/24 via 192.168.254.2 dev eth1
            ip route add 192.168.1.0/24 via 192.168.254.2 dev eth1
            ip route add 192.168.2.0/24 via 192.168.254.2 dev eth1
            ip route add 192.168.255.4/30 via 192.168.254.2 dev eth1
            ip route add 192.168.255.8/30 via 192.168.254.2 dev eth1
            # Сделаем проброс портов
            iptables -t nat -A PREROUTING -i eth2 -p tcp --dport 8080 -j DNAT --to-destination 192.168.254.2:80
            # И обратную подмену, т.к. маскарада у нас нет (дополнительное задание)
            iptables -t nat -A POSTROUTING --dst 192.168.254.2 -p tcp --dport 80 -j SNAT --to-source 192.168.254.1
            SHELL

        when "centralRouter"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            sysctl net.ipv4.conf.all.forwarding=1
            ip route delete default 2>&1 >/dev/null || true
            ip address add 192.168.0.33/28 dev eth3:1
            ip link set eth3:1 up
            ip address add 192.168.0.65/26 dev eth4:1
            ip link set eth4:1 up
            ip route add 192.168.1.0/24 via 192.168.255.6 dev eth4
            ip route add 192.168.2.0/24 via 192.168.255.10 dev eth3
            ip route add 0.0.0.0/0 via 192.168.255.1 dev eth1
            ip address add 192.168.254.2/30 dev eth1:1
            ip link set eth1:1 up
            ip route add 0.0.0.0/0 via 192.168.254.1 dev eth1:1 metric 200
            # Ставим nginx
            yes | yum install -y -q epel-release
            yes | yum install -y -q nginx
            systemctl enable nginx
            systemctl start nginx
            yes | yum install -y -q nmap
            SHELL

        when "office1Router"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            sysctl net.ipv4.conf.all.forwarding=1
            ip route delete default 2>&1 >/dev/null || true
            ip address add 192.168.2.193/26 dev eth4:1
            ip link set eth4:1 up
            ip route add 192.168.0.0/24 via 192.168.255.9 dev eth1
            ip route add 192.168.1.0/24 via 192.168.255.9 dev eth1
            ip route add 192.168.255.4/30 via 192.168.255.9 dev eth1
            ip route add 0.0.0.0/0 via 192.168.255.9 dev eth1
            SHELL

        when "office2Router"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            sysctl net.ipv4.conf.all.forwarding=1
            ip route delete default 2>&1 >/dev/null || true
            ip route add 192.168.0.0/24 via 192.168.255.5 dev eth1
            ip route add 192.168.2.0/24 via 192.168.255.5 dev eth1
            ip route add 192.168.255.8/30 via 192.168.255.5 dev eth1
            ip route add 0.0.0.0/0 via 192.168.255.5 dev eth1
            SHELL

        when "centralServer"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            ip route delete default 2>&1 >/dev/null || true
            ip route add 0.0.0.0/0 via 192.168.0.1 dev eth1
            SHELL

        when "office1Server"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            ip route delete default 2>&1 >/dev/null || true
            ip route add 0.0.0.0/0 via 192.168.2.65 dev eth1
            SHELL

        when "office2Server"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            ip route delete default 2>&1 >/dev/null || true
            ip route add 0.0.0.0/0 via 192.168.1.129 dev eth1
            SHELL
        end
    end
  end
end
